name: Backend Dev Deployment

# Triggers on pushes to dev branch that change files in the backend directory
on:
  push:
    branches:
      - dev
    paths:
      - 'backend/**'
  # Allow manual triggering for testing or emergency deployments
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the workflow with debug logging'
        required: false
        default: false

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock
          pip install -r backend/requirements.txt
      
    
      #- name: Run unit tests
      #  run: |
      #    cd backend
      #    python -m pytest tests/ -v
  
  deploy-dev:
    name: Deploy to Dev
    needs: test
    if: success()
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Create Python packages directory structure
          cd backend
          mkdir -p .python_packages/lib/site-packages
          # Install packages to the expected directory structure
          pip install --target=".python_packages/lib/site-packages" -r requirements.txt
          npm i -g azure-functions-core-tools@4 --unsafe-perm true
      
      - name: Debug Python packages
        if: ${{ github.event.inputs.debug_enabled == 'true' }}
        run: |
          cd backend
          echo "Python packages directory structure:"
          find .python_packages -type d | sort
          echo "Python packages contents:"
          ls -la .python_packages/lib/site-packages/
          echo "Azure packages:"
          find .python_packages -name "azure*" | sort

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set environment variables
        run: |
          echo "RESOURCE_GROUP=azure-resume-dev-rg" >> $GITHUB_ENV
      
      - name: Get Function App Name
        id: function-app
        run: |
          FUNCTION_APP=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name main \
            --query properties.outputs.functionAppName.value \
            -o tsv)
          echo "::set-output name=name::$FUNCTION_APP"
          echo "Function App name: $FUNCTION_APP"
      
      - name: Get CosmosDB Connection String
        id: cosmos-db
        run: |
          COSMOS_DB_ACCOUNT=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name main \
            --query properties.outputs.cosmosDBAccountName.value \
            -o tsv)
          
          echo "CosmosDB Account name: $COSMOS_DB_ACCOUNT"
          
          # Get the connection string (this is secure)
          CONNECTION_STRING=$(az cosmosdb keys list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $COSMOS_DB_ACCOUNT \
            --type connection-strings \
            --query connectionStrings[0].connectionString \
            -o tsv)
          
          # Save connection string to a file (not echoed to logs)
          echo "$CONNECTION_STRING" > connection_string.txt
      
      - name: Deploy Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ steps.function-app.outputs.name }}
          package: backend
          respect-funcignore: true
          scm-do-build-during-deployment: true
          enable-oryx-build: true

      # Add the new step right here, after the deployment step
      - name: Deploy dependencies manually
        uses: azure/CLI@v1
        if: always()  # Run even if the previous step failed
        with:
          inlineScript: |
            # Use direct deployment of Python packages
            az functionapp config appsettings set \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ steps.function-app.outputs.name }} \
              --settings "PYTHON_ENABLE_WORKER_EXTENSIONS=1"
            
            # Restart function app to apply settings
            az functionapp restart --name ${{ steps.function-app.outputs.name }} \
              --resource-group ${{ env.RESOURCE_GROUP }}

      - name: Update Function App Settings
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Update app settings with correct connection string
            CONNECTION_STRING=$(cat connection_string.txt)
            
            az functionapp config appsettings set \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ steps.function-app.outputs.name }} \
              --settings "COSMOS_CONNECTION_STRING=$CONNECTION_STRING" "TABLE_NAME=visitors"
            
            # Configure CORS for the frontend
            STATIC_URL=$(az deployment group show \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name main \
              --query properties.outputs.storageStaticWebsiteUrl.value \
              -o tsv)
            
            CDN_URL=$(az deployment group show \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name main \
              --query properties.outputs.cdnEndpointUrl.value \
              -o tsv || echo "")
            
            echo "Setting CORS for the static website URL"
            az functionapp cors add \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ steps.function-app.outputs.name }} \
              --allowed-origins "$STATIC_URL"
            
            if [[ -n "$CDN_URL" ]]; then
              echo "Setting CORS for the CDN endpoint URL"
              az functionapp cors add \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ steps.function-app.outputs.name }} \
                --allowed-origins "$CDN_URL"
            fi
      
      - name: Clean up sensitive files
        run: rm connection_string.txt
      
      - name: Deployment Summary
        run: |
          FUNCTION_URL="https://${{ steps.function-app.outputs.name }}.azurewebsites.net"
          echo "Deployment to DEV environment completed successfully."
          echo "Function App URL: $FUNCTION_URL"
          echo "API endpoints:"
          echo "  - $FUNCTION_URL/api/GetResumeCounter"
          echo "  - $FUNCTION_URL/api/UpdateResumeCounter"